Description: >-
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each
  AZ), and default routes for them in the private subnets.

# Parameters  
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      first Availability Zone
    Type: String
    Default: 10.0.2.0/23

  PrivateSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      second Availability Zone
    Type: String
    Default: 10.0.4.0/23


# Resources
Resources:

# Create VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

# Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Public Subent1
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-2a
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)'

# Public Subnet2
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-2c
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ2)'

# Private Subnet1
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-2a
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ1)'

# Private Subnet2
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-2c
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ2)'

# Public Routing Table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'

# Public Routing Table Default 
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Private Routing Table 
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes'

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

# BLUM-Target-SG 
  NoIngressSecurityGroup1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: BLUM-Target-SG
      GroupDescription: Security group with no ingress rule
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref NoIngressSecurityGroup3 #(LB)
        FromPort: 80
        ToPort: 80

# BLUM-DB-SG          
  NoIngressSecurityGroup2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: BLUM-DB-SG
      GroupDescription: Security group with no ingress rule
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref NoIngressSecurityGroup1 #(Target-Group)
        FromPort: 3306
        ToPort: 3306

# BLUM-LB-SG
  NoIngressSecurityGroup3:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: BLUM-LB-SG
      GroupDescription: Security group with no ingress rule
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443

# LoadBalancer
  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      # Listeners:
      #   - LoadBalancerPort: '80'
      #     InstancePort: '80'
      #     Protocol: HTTP
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      # HealthCheck:
      #   Target: 'HTTP:80/'
      #   HealthyThreshold: '3'
      #   UnhealthyThreshold: '5'
      #   Interval: '30'
      #   Timeout: '5'
      SecurityGroups:
        - !Ref NoIngressSecurityGroup3

# Target Group Listener 
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

# Target Group
  LoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5 
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5      
      VpcId: !Ref VPC
      # HealthCheckPort: 80
      # HealthCheckProtocol: HTTP
      # HealthyThresholdCount: 2
      Name: LBTargetGroup
      # SecurityGroup : 
      #  - !Ref NoIngressSecurityGroup1

# RDS Subnet Group
  RDSSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB Subnet Group Description
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: test stack RDS Subnet Group

# DB SG
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      DBSecurityGroupIngress:
        EC2SecurityGroupName:
          Ref: NoIngressSecurityGroup2
      GroupDescription: Frontend Access

# DB instance (RDS) 
  DBinstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: '100'
      DBInstanceClass: db.t2.micro
      Engine: MariaDB
      EngineVersion : 10.3.13
      MultiAZ: 'true'
      DBInstanceIdentifier: test4-DB
      DBName: webdb
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
      - Ref: NoIngressSecurityGroup2
      StorageType: io1
      Iops: '1000'
      MaxAllocatedStorage: '1000'
      Port: '3306'
      PubliclyAccessible: 'false'
      MasterUsername : blum
      MasterUserPassword : 123456789
      Tags:
        - Key: Name
          Value: test stack

#Auto Scaling LunchConfiguration
  SimpleConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: BLUM_KEY     # 기존 Key
      ImageId: ami-0c18cca85e4b593df # BLUM_AMI
      SecurityGroups:
      - Ref: NoIngressSecurityGroup1  
      InstanceType: t2.micro
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"     # or /dev/sda
        Ebs:
          VolumeSize: 8
    # Metadata:         
    #   Comment: Install a simple application
    #   UserData:      # UserData
    #     Fn::Base64:
    #       !Sub |
    #         #!/bin/bash -xe
    #         sudo su
    #         yum -y install httpd-*
    #         yum -y install wget unzip
    #         wget -q http://rpms.remirepo.net/enterprise/remi-release-7.rpm
    #         wget -q https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    #         rpm -Uvh remi-release-7.rpm epel-release-latest-7.noarch.rpm
    #         yum -y --enablerepo=remi-php71 install php php-mysql php-fpm php-mbstring php-xml
    #         yum -y --enablerepo=remi-php71 install zip unzip php-zip
    #         cd /var/www/html
    #         wget https://blumwebfils.s3.ap-northeast-2.amazonaws.com/BLUM.zip
    #         unzip BLUM.zip -d ./BLUM/
    #         systemctl start httpd 
    #         systemctl enable httpd
    #         sed -i -e 's~^DocumentRoot "/var/www/html"$~DocumentRoot "/var/www/html/BLUM"~g' /etc/httpd/conf/httpd.conf
    #         sed -i -e 's~^    DirectoryIndex index.html$~    DirectoryIndex index.html index.php~g' /etc/httpd/conf/httpd.conf
    #         systemctl restart httpd        

# Scale UP Policy
  WebServerScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref MyServerGroup
      Cooldown: 30
      ScalingAdjustment: 1  

# Scale Down Policy
  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref MyServerGroup
      Cooldown: 30
      ScalingAdjustment: -1    

# Auto Scaling Goup resource
  MyServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:   
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      AvailabilityZones:  
        - ap-northeast-2a
        - ap-northeast-2c
      LaunchConfigurationName:
        Ref: SimpleConfig
      MinSize: 2
      MaxSize: 4
      # LoadBalancerNames:
      #   - !Ref MyLoadBalancer  # or Test
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup 
      NotificationConfigurations:
      - TopicARN:
          Ref: MySNSTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR

# SNS Topic
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: "kimjhtlzk@naver.com"
        Protocol: email

# CloudWatch Alarm
# Cpu - Scale UP 
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyServerGroup
      ComparisonOperator: GreaterThanThreshold

# Cpu - Scale Down
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyServerGroup
      ComparisonOperator: LessThanThreshold
  